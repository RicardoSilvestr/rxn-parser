{"version":3,"sources":["webpack:///rxn-parser/webpack/universalModuleDefinition","webpack:///rxn-parser/rxn-parser.min.js","webpack:///rxn-parser/webpack/bootstrap 6e9aaa81713d4e9f42da","webpack:///rxn-parser/./src/index.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","parse","rxn","TypeError","header","substr","crlf","indexOf","rxnParts","split","reagents","products","result","length","Error","lines","numberReagents","substring","numberProducts","i","push"],"mappings":"CAAA,SAAAA,EAAAC,GACA,gBAAAC,UAAA,gBAAAC,QACAA,OAAAD,QAAAD,IACA,kBAAAG,gBAAAC,IACAD,UAAAH,GACA,gBAAAC,SACAA,QAAA,UAAAD,IAEAD,EAAA,UAAAC,KACCK,KAAA,WACD,MCAgB,UAAUC,GCN1B,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAP,OAGA,IAAAC,GAAAO,EAAAD,IACAP,WACAS,GAAAF,EACAG,QAAA,EAUA,OANAL,GAAAE,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAS,QAAA,EAGAT,EAAAD,QAvBA,GAAAQ,KAqCA,OATAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,GAGAR,EAAA,KDgBM,SAASL,EAAQD,GEtDvB,YAEA,SAAAe,GAAAC,GACA,mBAAAA,GACA,SAAAC,WAAA,mCAGA,IAAAC,GAAAF,EAAAG,OAAA,OACAC,EAAA,IACAF,GAAAG,QAAA,WACAD,EAAA,OACKF,EAAAG,QAAA,WACLD,EAAA,KAGA,IAAAE,GAAAN,EAAAO,MAAAH,EAAA,OAAAA,GAEAI,KACAC,KAEAC,IASA,IARAA,EAAAF,WACAE,EAAAD,WAOA,IAAAH,EAAAK,OAAA,SAAAC,OAAA,mBAEA,IAAAV,GAAAI,EAAA,EACA,OAAAJ,EAAAG,QAAA,iBAAAO,OAAA,gCAEA,IAAAC,GAAAX,EAAAK,MAAAH,EACA,IAAAS,EAAAF,OAAA,WAAAC,OAAA,sCAEA,IAAAE,GAAAD,EAAA,GAAAE,UAAA,QACAC,EAAAH,EAAA,GAAAE,UAAA,OAEA,IAAAD,EAAAE,GAAAV,EAAAK,OAAA,WAAAC,OAAA,sCAEA,QAAAK,GAAA,EAAiBA,EAAAX,EAAAK,OAAmBM,IACpCH,GAAAG,EACAT,EAAAU,KAAAZ,EAAAW,IAEAR,EAAAS,KAAAZ,EAAAW,GAGA,OAAAP,GAIAzB,EAAAD,QAAAe","file":"rxn-parser.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SDFParser\"] = factory();\n\telse\n\t\troot[\"SDFParser\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SDFParser\"] = factory();\n\telse\n\t\troot[\"SDFParser\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tfunction parse(rxn) {\n\t    if (typeof rxn !== 'string') {\n\t        throw new TypeError('Parameter \"rxn\" must be a string');\n\t    }\n\t    // we will find the delimiter in order to be much faster and not use regular expression\n\t    var header = rxn.substr(0, 1000);\n\t    var crlf = '\\n';\n\t    if (header.indexOf('\\r\\n') > -1) {\n\t        crlf = '\\r\\n';\n\t    } else if (header.indexOf('\\r') > -1) {\n\t        crlf = '\\r';\n\t    }\n\t\n\t    var rxnParts = rxn.split(crlf + '$MOL' + crlf);\n\t\n\t    var reagents=[];\n\t    var products=[];\n\t\n\t    var result={};\n\t    result.reagents=reagents;\n\t    result.products=products;\n\t\n\t\n\t    // the first part is expected to contain the number of reagents and products\n\t\n\t    // First part should start with $RXN\n\t    // and the fifth line should contain the number of reagents and products\n\t    if (rxnParts.length===0) throw new Error('file looks empty');\n\t\n\t    var header=rxnParts[0];\n\t    if (header.indexOf(\"$RXN\")!=0) throw new Error('file does not start with $RXN');\n\t\n\t    var lines=header.split(crlf);\n\t    if (lines.length<5) throw new Error('incorrect number of lines in header');\n\t\n\t    var numberReagents=lines[4].substring(0,3) >> 0;\n\t    var numberProducts=lines[4].substring(3,6) >> 0;\n\t\n\t    if (numberReagents+numberProducts!=rxnParts.length-1) throw new Error('not the correct number of molecules');\n\t\n\t    for (var i=1; i<rxnParts.length; i++) {\n\t        if (i<=numberReagents) {\n\t            reagents.push(rxnParts[i]);\n\t        } else {\n\t            products.push(rxnParts[i]);\n\t        }\n\t    }\n\t    return result;\n\t\n\t}\n\t\n\tmodule.exports = parse;\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** rxn-parser.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 6e9aaa81713d4e9f42da\n **/","'use strict';\n\nfunction parse(rxn) {\n    if (typeof rxn !== 'string') {\n        throw new TypeError('Parameter \"rxn\" must be a string');\n    }\n    // we will find the delimiter in order to be much faster and not use regular expression\n    var header = rxn.substr(0, 1000);\n    var crlf = '\\n';\n    if (header.indexOf('\\r\\n') > -1) {\n        crlf = '\\r\\n';\n    } else if (header.indexOf('\\r') > -1) {\n        crlf = '\\r';\n    }\n\n    var rxnParts = rxn.split(crlf + '$MOL' + crlf);\n\n    var reagents=[];\n    var products=[];\n\n    var result={};\n    result.reagents=reagents;\n    result.products=products;\n\n\n    // the first part is expected to contain the number of reagents and products\n\n    // First part should start with $RXN\n    // and the fifth line should contain the number of reagents and products\n    if (rxnParts.length===0) throw new Error('file looks empty');\n\n    var header=rxnParts[0];\n    if (header.indexOf(\"$RXN\")!=0) throw new Error('file does not start with $RXN');\n\n    var lines=header.split(crlf);\n    if (lines.length<5) throw new Error('incorrect number of lines in header');\n\n    var numberReagents=lines[4].substring(0,3) >> 0;\n    var numberProducts=lines[4].substring(3,6) >> 0;\n\n    if (numberReagents+numberProducts!=rxnParts.length-1) throw new Error('not the correct number of molecules');\n\n    for (var i=1; i<rxnParts.length; i++) {\n        if (i<=numberReagents) {\n            reagents.push(rxnParts[i]);\n        } else {\n            products.push(rxnParts[i]);\n        }\n    }\n    return result;\n\n}\n\nmodule.exports = parse;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/index.js\n ** module id = 0\n ** module chunks = 0\n **/"],"sourceRoot":""}